#!/bin/bash
set -euo pipefail

RCLONE_CONFIG_PATH="/run/secrets/rclone.conf"

if [[ -f "$RCLONE_CONFIG_PATH" ]]; then
  mkdir -p /root/.config/rclone
  cp "$RCLONE_CONFIG_PATH" /root/.config/rclone/rclone.conf
fi

SSH_CONFIG_PATH="/run/secrets/.ssh"

if [[ -d "$SSH_CONFIG_PATH" ]]; then
  cp -r "${SSH_CONFIG_PATH}/." /root/.ssh
  chmod 700 /root/.ssh
  chmod -R u+rwX,go-rwx /root/.ssh
fi

command="${1-}"

if [[ "$command" != "unlock" ]]; then
  echo "Checking configured repository '${RESTIC_REPOSITORY}' ..."
  if restic cat config > /dev/null; then
    echo "Repository found."
  else
    echo "Could not access the configured repository. Trying to initialize (in case it has not been initialized yet) ..."
    if restic init; then
      echo "Repository successfully initialized."
    else
      if [ "${SKIP_INIT_CHECK:-}" == "true" ]; then
        echo "Initialization failed. Ignoring errors because SKIP_INIT_CHECK is set in your configuration."
      else
        echo "Initialization failed. Please see error messages above and check your configuration. Exiting."
        exit 1
      fi
    fi
  fi
  echo -e "\n"
fi

if [[ $# -gt 0 ]]; then
  exec restic "$@"
else
  if [[ -n "${BACKUP_CRON:-}" ]] && [[ -n "${PRUNE_CRON:-}" ]]; then
    >&2 echo "Environment variables BACKUP_CRON and PRUNE_CRON are mutually exclusive. Please fix your configuration. Exiting."
    exit 1
  fi
  if [[ -n "${BACKUP_CRON:-}" ]] && [[ -n "${CHECK_CRON:-}" ]]; then
    >&2 echo "Environment variables BACKUP_CRON and CHECK_CRON are mutually exclusive. Please fix your configuration. Exiting."
    exit 1
  fi
  if [[ -n "${PRUNE_CRON:-}" ]] && [[ -n "${CHECK_CRON:-}" ]]; then
    >&2 echo "Environment variables PRUNE_CRON and CHECK_CRON are mutually exclusive. Please fix your configuration. Exiting."
    exit 1
  fi
  if [[ -n "${BACKUP_CRON:-}" ]]; then
    if [ "${RUN_ON_STARTUP:-}" == "true" ]; then
      echo "Executing backup on startup ..."
      /usr/local/bin/backup
    fi
    echo "Scheduling backup job according to cron expression."
    exec go-cron "$BACKUP_CRON" /usr/local/bin/backup
  fi
  if [[ -n "${PRUNE_CRON:-}" ]]; then
    if [ "${RUN_ON_STARTUP:-}" == "true" ]; then
      echo "Executing prune job on startup ..."
      /usr/local/bin/prune
    fi
    echo "Scheduling prune job according to cron expression."
    exec go-cron "$PRUNE_CRON" /usr/local/bin/prune
  fi
  if [[ -n "${CHECK_CRON:-}" ]]; then
    if [ "${RUN_ON_STARTUP:-}" == "true" ]; then
      echo "Executing check job on startup ..."
      /usr/local/bin/check
    fi
    echo "Scheduling check job according to cron expression."
    exec go-cron "$CHECK_CRON" /usr/local/bin/check
  fi
  >&2 echo "No valid operating mode configured! Exiting."
  exit 1
fi
