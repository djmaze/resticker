#!/bin/bash
set -eo pipefail

function run_commands {
	COMMANDS=$1
	while IFS= read -r cmd; do echo $cmd && eval $cmd ; done < <(printf '%s\n' "$COMMANDS")
}

function run_exit_commands {
	set +e
	set +o pipefail
	run_commands "${POST_COMMANDS_EXIT:-}"
}

trap run_exit_commands EXIT

run_commands "${PRE_COMMANDS:-}"

RESTIC_BACKUP_SOURCES=${RESTIC_BACKUP_SOURCES:-/data}
RESTIC_BACKUP_TAGS="${RESTIC_BACKUP_TAGS:-}"

tags="$(echo "$RESTIC_BACKUP_TAGS" | tr "," "\n")"
tag_options=""
for tag in $tags; do
  tag_options="${tag_options} --tag $tag"
done

start=`date +%s`
echo Starting Backup at $(date +"%Y-%m-%d %H:%M:%S")

set +e
restic ${RESTIC_GLOBAL_ARGS:-} backup ${RESTIC_BACKUP_ARGS:-} ${tag_options} ${RESTIC_BACKUP_SOURCES}
if [ $? -ne 0 ]
then
	set -e
	run_commands "${POST_COMMANDS_FAILURE:-}"
	exit
else
	set -e
fi

echo Backup successful

if [ -n "${RESTIC_FORGET_ARGS}" ]; then
  echo Forget about old snapshots based on RESTIC_FORGET_ARGS = ${RESTIC_FORGET_ARGS}
  restic ${RESTIC_GLOBAL_ARGS:-} forget ${tag_options} ${RESTIC_FORGET_ARGS}
fi

end=`date +%s`
echo Finished backup at $(date +"%Y-%m-%d %H:%M:%S") after $((end-start)) seconds

run_commands "${POST_COMMANDS_SUCCESS:-}"
